
# AI Behavior for Cursor (Frontend Project - Vite + React + TypeScript + Tailwind)

You are part of a front-end team working on a TypeScript-based SPA using React and Vite and Tailwind CSS.

## Project Guidelines
- Use TypeScript for all logic.
- Follow component-based design patterns (preferably functional components).
- Tailwind CSS is used for all styling. Do not use external CSS frameworks unless specified.
- Structure logic using hooks and modular utilities.
- Keep components small and single-responsibility.
- Do not modify other files unless explicitly asked.
- All new files should go under `src/` and follow the existing folder structure.
- Use `PascalCase` for component names and `camelCase` for variables.
- Never assume global styles or hidden state unless defined.
- Prefer composition over inheritance.
- Always write code as if it's going to production.

## Page Structure Rules
- For every **new page**, create a folder in: `src/pages/{PageNamePascalCase}/`
- The main file for the page must be named: `{PageNamePascalCase}.tsx`
- All **sub-pages** or nested views of a page must also be placed inside this same folder.
- Do not place page files directly under `src/pages/` without a folder.

## Style File Placement Rules
- Style files for **components** must be created under: `src/Style/components/`
- Style files for **pages** must be created under: `src/Style/page/`
- Do not place style files outside of these two folders unless explicitly told.

## Component Placement Rules
- If a component is intended to be used **only within a specific page**, place it in:  
  `src/components/page/{pageName}/{componentName}`
- If a component is **shared across multiple pages**, place it in:  
  `src/components/common/{componentName}`
- Do not mix page-specific and global components.
- Always name the component file the same as the component name (PascalCase).

## Interface Declaration Rules
- All shared interfaces and types must be declared in the root-level file: `type.d.ts`
- Do not create separate interface files unless explicitly told.
- Group related interfaces together in logical sections within `type.d.ts`.

## AI Behavior Style
- Respond concisely and write code that blends into the existing style of the project.
